declare type NodeProps<T> = {
    value: T;
    nextNode?: Node<T>;
    prevNode?: Node<T>;
};
declare class Node<T> {
    nextNode?: Node<T>;
    prevNode?: Node<T>;
    private readonly _value;
    constructor({ value, nextNode, prevNode }: NodeProps<T>);
    get value(): T;
}
declare class DoubleLinkedList<T> {
    private tail?;
    private head?;
    private nodeSet;
    private valueSet;
    addFront(value: T): Node<T>;
    addFrontMany(values: T[]): Node<T>[];
    addBack(value: T): Node<T>;
    addBackMany(values: T[]): Node<T>[];
    addIndex(value: T, index: number): Node<T>;
    private addNode;
    addNodeIndex(node: Node<T>, index: number): void;
    addNodeFront(node: Node<T>): void;
    addNodeFrontMany(nodes: Node<T>[]): void;
    addNodeBack(node: Node<T>): void;
    addNodeBackMany(nodes: Node<T>[]): void;
    addNodeBeforeNode(nodeToAdd: Node<T>, beforeNode: Node<T>): void;
    addBeforeNode(value: T, beforeNode: Node<T>): Node<T>;
    addNodeAfterNode(nodeToAdd: Node<T>, afterNode: Node<T>): void;
    addAfterNode(value: T, afterNode: Node<T>): Node<T>;
    private addNodeEmpty;
    peekHead(): Node<T> | undefined;
    peekHeadValue(): T | undefined;
    peekTail(): Node<T> | undefined;
    peekTailValue(): T | undefined;
    removeNode(node?: Node<T>): Node<T> | undefined;
    removeAtIndex(index: number): Node<T> | void;
    removeFirstOccurrence(value: T): Node<T> | void;
    removeLastOccurrence(value: T): Node<T> | void;
    removeAllOccurrences(value: T): Node<T>[];
    removeHead(): Node<T> | undefined;
    removeTail(): Node<T> | undefined;
    containsNode(node: Node<T>): boolean;
    containsValue(value: T): boolean;
    map<U>(proc: (value: T) => U): U[];
    forEach(proc: (value: T) => void): void;
    indexOfNode(node: Node<T>): number;
    lastIndexOfValue(value: T): number;
    indexOfValue(value: T): number;
    clear(): void;
    clone(): DoubleLinkedList<T>;
    get length(): number;
    toArray(): T[];
    valueIterator(): IterableIterator<T>;
    nodeIterator(): IterableIterator<Node<T>>;
    valueIteratorReverse(): IterableIterator<T>;
    nodeIteratorReverse(): IterableIterator<Node<T>>;
    [Symbol.iterator](): IterableIterator<T>;
}
export { DoubleLinkedList, Node };
export type { NodeProps };
